import "@/styles/globals.css";

import { type Metadata } from "next";
import { Rubik } from "next/font/google";

import MainLayout from "@/components/admin/main-layout";
import Nav from "@/components/admin/nav";
import { AppSidebar } from "@/components/admin/nav/app-sidebar";
import { SidebarProvider } from "@/components/ui/sidebar";
import { TRPCReactProvider } from "@/trpc/react";
import { Toaster } from "@/components/ui/sonner";
import {
  AlertTriangle,
  CheckCircle,
  Info,
  Loader,
  XCircle,
} from "lucide-react";
import OnMountTheme from "@/components/admin/nav/onmount-theme";
import { NextSSRPlugin } from "@uploadthing/react/next-ssr-plugin";
import { extractRouterConfig } from "uploadthing/server";

import { cn } from "@/lib/utils";
import { env } from "@/env";
import { ourFileRouter } from "./api/uploadthing/core";

export const metadata: Metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

const rubik = Rubik({
  subsets: ["latin"],
  display: "swap",
});

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en" className={`${rubik.className}`}>
      <body
        className={cn("text-lg font-light", {
          "debug-screens": env.NODE_ENV === "development",
        })}
      >
        <TRPCReactProvider>
          <SidebarProvider>
            <AppSidebar />
            <MainLayout className="flex flex-col gap-8">
              <NextSSRPlugin
                /**
                 * The `extractRouterConfig` will extract **only** the route configs
                 * from the router to prevent additional information from being
                 * leaked to the client. The data passed to the client is the same
                 * as if you were to fetch `/api/uploadthing` directly.
                 */
                routerConfig={extractRouterConfig(ourFileRouter)}
              />
              <Nav />
              <OnMountTheme />
              <Toaster
                position="top-right"
                duration={1000 * 3}
                visibleToasts={1}
                icons={{
                  success: <CheckCircle className="pr-1.5 text-green-500" />,
                  info: <Info className="pr-1.5 text-blue-500" />,
                  warning: <AlertTriangle className="pr-1.5 text-amber-500" />,
                  error: <XCircle className="pr-1.5 text-red-500" />,
                  loading: (
                    <Loader className="animate-spin pr-1.5 text-gray-500" />
                  ),
                }}
              />
              {children}
            </MainLayout>
          </SidebarProvider>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
